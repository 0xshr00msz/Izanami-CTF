# Generated by Django 5.2.3 on 2025-06-16 07:19

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('points', models.IntegerField(default=100)),
                ('flag', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('requires_authentication', models.BooleanField(default=True)),
                ('chakra_cost', models.IntegerField(default=10)),
                ('hint_available', models.BooleanField(default=True)),
                ('has_xss', models.BooleanField(default=False)),
                ('has_sqli', models.BooleanField(default=False)),
                ('has_csrf', models.BooleanField(default=False)),
                ('has_file_upload', models.BooleanField(default=False)),
                ('has_ssrf', models.BooleanField(default=False)),
                ('has_command_injection', models.BooleanField(default=False)),
                ('has_insecure_deserialization', models.BooleanField(default=False)),
                ('has_websocket_vulnerability', models.BooleanField(default=False)),
                ('has_api_vulnerability', models.BooleanField(default=False)),
                ('has_graphql_vulnerability', models.BooleanField(default=False)),
                ('has_race_condition', models.BooleanField(default=False)),
                ('has_prototype_pollution', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ChallengeCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('icon', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name_plural': 'Challenge Categories',
            },
        ),
        migrations.CreateModel(
            name='DifficultyLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField()),
                ('order', models.IntegerField(default=0)),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ChallengeAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submitted_flag', models.CharField(max_length=255)),
                ('is_correct', models.BooleanField(default=False)),
                ('attempted_at', models.DateTimeField(auto_now_add=True)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='challenges.challenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='challenge',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenges', to='challenges.challengecategory'),
        ),
        migrations.AddField(
            model_name='challenge',
            name='difficulty',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenges', to='challenges.difficultylevel'),
        ),
        migrations.CreateModel(
            name='Hint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('chakra_cost', models.IntegerField(default=5)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hints', to='challenges.challenge')),
            ],
        ),
        migrations.CreateModel(
            name='ChallengeSolve',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('solved_at', models.DateTimeField(auto_now_add=True)),
                ('attempts', models.IntegerField(default=1)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='solves', to='challenges.challenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='solves', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'challenge')},
            },
        ),
        migrations.CreateModel(
            name='HintUnlock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unlocked_at', models.DateTimeField(auto_now_add=True)),
                ('hint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unlocks', to='challenges.hint')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unlocked_hints', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'hint')},
            },
        ),
    ]
